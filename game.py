from telebot import TeleBot, types
import sqlite3
import alive
import logging
import datetime
from time import sleep
from games_1 import casino, casino_fire
from games_2 import stone_game, stone, scissors, paper
from games_3 import tails, verify
from game_dice import dice, dice_min, dice_three, dice_max
import game_21
from yookassa import Configuration, Payment

bot = TeleBot('6739834598:AAGfsRZZyrn2-ki5BgOdYeZWm5OUfh6UJxw')

yootoken = '390540012:LIVE:46917'

Configuration.account_id = '337976'
Configuration.secret_key = 'test_nLq_kHuSF_E9J-_c-2-vxtvqXsSDVgGXB0Kcg6UwnkE'

conn = sqlite3.connect('game.sqlite', check_same_thread=False)


class User:
    def __init__(self, name, user_id, money=35, status='–ù–æ–≤–∏—á–æ–∫', wins=0):
        self.name = name
        self.id = user_id
        self.money = money
        self.status = status
        self.wins = wins

    def update_money(self):
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET money = ?, status = ?, wins = ? WHERE user_id = ?",
                       (self.money, self.status, self.wins, self.id))
        conn.commit()
        cursor.close()

    def update_wins(self):
        self.wins += 1
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET money = ?, status = ?, wins = ? WHERE user_id = ?",
                       (self.money, self.status, self.wins, self.id))
        conn.commit()
        cursor.close()

    def add_money(self, amount):
        self.money += amount
        self.update_money()

    def deduct_money(self, amount):
        if self.money >= amount:
            self.money -= amount
            self.update_money()

    def get_info(self):
        return f'üåö–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüåù\n\n' \
               f'–°—Ç–∞—Ç—É—Å: {self.status}\n\n'\
               f'–ü–æ–±–µ–¥—ã: {self.wins}\n\n'\
               f'–ò–º—è: {self.name}\n\n' \
               f'ID: {self.id}\n\n' \
               f'–ú–æ–Ω–µ—Ç—ã: {self.money}üí∞'


def admin_users(call):
    if call.from_user.id == 517899909:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users")
        users_info = cursor.fetchall()
        cursor.close()
        update_status(call.from_user.id)
        all_user = ''
        for user_info in users_info:
            a_id, user_id, name, money, status, wins = user_info
            user_info_text = (f"üÜî: {user_id}\n"
                              f"üÉè: {name}\n"
                              f'‚öõÔ∏è: {status}\n'
                              f'üéñÔ∏è: {wins}\n'
                              f"üí∞: {money}\n\n")
            all_user += user_info_text

        current_time = datetime.datetime.now().strftime("%H:%M:%S")
        all_user += f"–í—Ä–µ–º—è: {current_time}"

        if call.message:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=all_user,
                                  reply_markup=inline_buttons(['–°—Ç–∞—Ç üå™', "Users", 'STOP ‚ùå', '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚òùüèª']))

        else:
            bot.send_message(call.message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


def get_or_create_user(user_id, name):
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    existing_user = cursor.fetchone()
    if existing_user:
        user = User(existing_user[2], existing_user[1], existing_user[3], existing_user[4], existing_user[5])
    else:
        cursor.execute('INSERT INTO users (user_id, name, money, status, wins) VALUES (?, ?, ?, ?, ?)',
                       (user_id, name, 35, '–ù–æ–≤–∏—á–æ–∫', 0))
        conn.commit()
        user = User(name, user_id, 35, '–ù–æ–≤–∏—á–æ–∫', 0)
    cursor.close()
    return user


def users_count(message):
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    cursor.close()

    bot.edit_message_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {count}",
        chat_id=message.chat.id,
        message_id=message.message_id,
        reply_markup=inline_buttons(['–°—Ç–∞—Ç üå™', "Users", 'STOP ‚ùå', '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚òùüèª'])
    )


def transfer_now(message):
    sent_message = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ: 'ID-—Å—É–º–º–∞'")
    bot.register_next_step_handler(sent_message, transfer_next)


def transfer_next(message):
    try:
        user_id, amount = map(int, message.text.split('-'))
        receiver = get_or_create_user(user_id, "Unknown")
        receiver.add_money(amount)
        if user_id != 517899909:
            bot.send_message(user_id, f"–ê–¥–º–∏–Ω –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à —Å—á–µ—Ç –Ω–∞ {amount}üí∞")
            bot.send_message(message.chat.id, f"–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}\n\n"
                                              f"–ù–∞–∂–º–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start", )
        else:
            bot.send_message(message.chat.id, f"–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π —Å—á–µ—Ç –Ω–∞ {amount}üí∞")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


def transfer_money_now(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ: 'ID-—Å—É–º–º–∞'")
    bot.register_next_step_handler(message, transfer_money_next)


def transfer_money_next(message):
    try:
        user_id, amount = map(int, message.text.split('-'))
        sender_id = message.from_user.id
        sender = get_or_create_user(sender_id, "Unknown")
        receiver = get_or_create_user(user_id, "Unknown")
        if sender_id != user_id:
            if sender.money >= amount:
                sender.deduct_money(amount)
                receiver.add_money(amount)
                bot.send_message(message.chat.id, f"–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}\n\n"
                                                  f"–ù–∞–∂–º–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start", )
            else:
                bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏")
        else:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–µ–±–µ üí∞!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'")
            transfer_money_now(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


def inline_buttons(buttons_lst, buttons_per_row=2):
    markup = types.InlineKeyboardMarkup()
    for i in range(0, len(buttons_lst), buttons_per_row):
        button_row = []
        for j in range(buttons_per_row):
            if i + j < len(buttons_lst):
                button_row.append(types.InlineKeyboardButton(text=buttons_lst[i + j], callback_data=buttons_lst[i + j]))
        markup.row(*button_row)
    return markup


def update_status(user_id):
    cursor = conn.cursor()
    cursor.execute("SELECT wins FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result is not None:
        wins = result[0]
        cursor.close()

        if wins < 100:
            new_status = '–ù–æ–≤–∏—á–æ–∫'
        elif 100 <= wins < 2000:
            new_status = '–°—Ç–∞–ª–∫–µ—Ä'
        elif 2000 <= wins < 5000:
            new_status = '–í–µ—Ç–µ—Ä–∞–Ω'
        elif 5000 <= wins < 10000:
            new_status = '–ú–∞—Å—Ç–µ—Ä'
        elif 10000 <= wins < 100000:
            new_status = '–ó–∞–≤–æ–µ–≤–∞—Ç–µ–ª—å'
        else:
            new_status = '–ë–û–ì'

        cursor = conn.cursor()
        cursor.execute("UPDATE users SET status = ? WHERE user_id = ?", (new_status, user_id))
        conn.commit()
        cursor.close()
    else:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
    exists = cursor.fetchone()
    if not exists:
        cursor.execute('INSERT INTO users (user_id, name, money, status, wins) VALUES (?, ?, ?, ?, ?)',
                       (user_id, message.from_user.first_name, 35, '–ù–æ–≤–∏—á–æ–∫', 0))
        conn.commit()
        bot.send_message(517899909, f'‚ö°Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º‚ö°Ô∏è')
        bot.send_message(message.chat.id,
                         f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name} üëãüèª\n\n'
                         f'–Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π!\n\n'
                         f'–ò –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ–≤–µ—Å–µ–ª–∏—Ç—å—Å—è üéÆ!\n\n'
                         f'–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é üëáüèª',
                         reply_markup=inline_buttons(
                             ["–ü—Ä–æ—Ñ–∏–ª—å", "–û—Ä—ë–ª / –†–µ—à–∫–∞", "‚úäüèª/‚úåüèª/‚úãüèª", '–ö–æ—Å—Ç–∏ üé≤', '21üÉè', "–ö–∞–∑–∏–Ω–æ üé∞"]))
    else:
        bot.send_message(message.chat.id, f'–†–∞–¥, —á—Ç–æ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å, {message.from_user.first_name}!',
                         reply_markup=inline_buttons(
                             ["–ü—Ä–æ—Ñ–∏–ª—å", "–û—Ä—ë–ª / –†–µ—à–∫–∞", "‚úäüèª/‚úåüèª/‚úãüèª", '–ö–æ—Å—Ç–∏ üé≤', '21üÉè', "–ö–∞–∑–∏–Ω–æ üé∞"]))
    cursor.close()


def account(message, user):
    if user.id == 517899909:
        user_menu = inline_buttons(['ADMIN', "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç", '–ü–µ—Ä–µ–¥–∞—Ç—å üí∞', '–í –º–µ–Ω—é ‚ÜòÔ∏è'], buttons_per_row=2)
    else:
        user_menu = inline_buttons(["–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç", '–ü—Ä–æ–¥–∞—Ç—å üí∏', '–ü–µ—Ä–µ–¥–∞—Ç—å üí∞', '–í –º–µ–Ω—é ‚ÜòÔ∏è'],
                                   buttons_per_row=2)
    update_status(message.chat.id)
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                          text=user.get_info(), reply_markup=user_menu)


def pay(message):
    bot.send_invoice(message.chat.id,
                     title="–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤",
                     description='100 —Ä—É–±–ª–µ–π --> 50 —Ç–æ–∫–µ–Ω–æ–≤',
                     invoice_payload="Payment: Zozulya Yaroslav",
                     currency="RUB",
                     max_tip_amount=10000,
                     suggested_tip_amounts=[20 * 10, 30 * 10, 40 * 10],
                     provider_token=yootoken,
                     photo_url='https://i.ibb.co/t3L4fYL/tokens.png',
                     photo_width=150,
                     photo_height=150,
                     photo_size=78,
                     need_name=True,
                     is_flexible=False,
                     prices=[types.LabeledPrice(label="50 üí∞", amount=100 * 100)],
                     start_parameter="payment")


@bot.shipping_query_handler(func=lambda query: True)
def shipping(shipping_query):
    bot.answer_shipping_query(shipping_query.id, ok=True)


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True, error_message="Error")


@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message):
    user_id = message.from_user.id
    amount = 50
    payment = Payment.create({
        "amount": {
            "value": str(amount * 2),
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/All_Funny_Games_bot"
        },
        'capture': True,
        "description": "–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –±–æ—Ç–∞"
    })
    user = get_or_create_user(user_id, message.from_user.first_name)
    if payment.status == 'succeeded':
        user.add_money(amount)
        bot.send_message(message.from_user.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {amount} —Ç–æ–∫–µ–Ω–æ–≤\n'
                                               f'–ù–∞–∂–º–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start')


game_instance = game_21.BlackjackGame()


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global game_instance
    logging.debug(f"Received callback query: {call.data}")

    user_id = call.from_user.id
    user = get_or_create_user(user_id, call.from_user.first_name)

    if call.data == "–ü—Ä–æ—Ñ–∏–ª—å":
        account(call.message, user)
    elif call.data == "–û—Ä—ë–ª / –†–µ—à–∫–∞":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=tails(), reply_markup=inline_buttons(["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ ü™ô", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == "‚úäüèª/‚úåüèª/‚úãüèª":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=stone_game(), reply_markup=inline_buttons(["‚úäüèª", "‚úåüèª", "‚úãüèª", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == "–ö–∞–∑–∏–Ω–æ üé∞":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=casino(), reply_markup=inline_buttons(["–ó–∞–ø—É—Å–∫ üî•", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '–ö–æ—Å—Ç–∏ üé≤':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=dice(), reply_markup=inline_buttons(["üé≤ < 3", "üé≤ = 3", "üé≤ > 3", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif (call.data == '21üÉè') or (call.data == '–ö –∏–≥—Ä–µ ‚¨ÜÔ∏è'):
        game_instance = game_21.BlackjackGame()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=game_instance.start_card(),
                              reply_markup=inline_buttons(["–ò–≥—Ä–∞—Ç—å ‚èØÔ∏è", "–ü—Ä–∞–≤–∏–ª–∞ üìù", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç":
        pay(call.message)
    elif call.data == "–ü–µ—Ä–µ–¥–∞—Ç—å üí∞":
        if user_id == 517899909:
            transfer_now(call.message)
        else:
            transfer_money_now(call.message)
    elif call.data == "ADMIN":
        if user_id == 517899909:
            bot.edit_message_text("–ú–µ–Ω—é ADMIN",
                                  call.message.chat.id,
                                  call.message.message_id,
                                  reply_markup=inline_buttons(['–°—Ç–∞—Ç üå™', "Users", 'STOP ‚ùå', '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚òùüèª']))

    elif call.data == "–°—Ç–∞—Ç üå™":
        users_count(call.message)
    elif call.data == "Users":
        admin_users(call)
    elif call.data == 'STOP ‚ùå':
        bot.stop_bot()
    elif call.data == '–û—Ä—ë–ª ü¶Ö':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=verify(call, user), reply_markup=inline_buttons(["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ ü™ô", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '–†–µ—à–∫–∞ ü™ô':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=verify(call, user), reply_markup=inline_buttons(["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ ü™ô", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '–ó–∞–ø—É—Å–∫ üî•':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=casino_fire(user), reply_markup=inline_buttons(["–ó–∞–ø—É—Å–∫ üî•", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '‚úäüèª':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=stone(user), reply_markup=inline_buttons(["‚úäüèª", "‚úåüèª", "‚úãüèª", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '‚úåüèª':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=scissors(user), reply_markup=inline_buttons(["‚úäüèª", "‚úåüèª", "‚úãüèª", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '‚úãüèª':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=paper(user), reply_markup=inline_buttons(["‚úäüèª", "‚úåüèª", "‚úãüèª", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == 'üé≤ < 3':
        dice_1 = bot.send_dice(call.message.chat.id)
        sleep(3)
        bot.send_message(chat_id=call.message.chat.id,
                         text=dice_min(dice_1, user),
                         reply_markup=inline_buttons(["üé≤ < 3", "üé≤ = 3", "üé≤ > 3", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == 'üé≤ = 3':
        dice_2 = bot.send_dice(call.message.chat.id)
        sleep(3)
        bot.send_message(chat_id=call.message.chat.id,
                         text=dice_three(dice_2, user),
                         reply_markup=inline_buttons(["üé≤ < 3", "üé≤ = 3", "üé≤ > 3", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == 'üé≤ > 3':
        dice_3 = bot.send_dice(call.message.chat.id)
        sleep(3)
        bot.send_message(chat_id=call.message.chat.id,
                         text=dice_max(dice_3, user),
                         reply_markup=inline_buttons(["üé≤ < 3", "üé≤ = 3", "üé≤ > 3", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '–ü—Ä–∞–≤–∏–ª–∞ üìù':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=game_instance.rules(), reply_markup=inline_buttons(["–ö –∏–≥—Ä–µ ‚¨ÜÔ∏è"]))
    elif call.data == '–ò–≥—Ä–∞—Ç—å ‚èØÔ∏è' or (call.data == '–°—ã–≥—Ä–∞—Ç—å –µ—â—ë'):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=game_instance.start(),
                              reply_markup=inline_buttons(["5üí∞", "10üí∞", "15üí∞", "20üí∞", "–ö –∏–≥—Ä–µ ‚¨ÜÔ∏è"]))

    elif call.data in ['5üí∞', '10üí∞', '15üí∞', '20üí∞']:
        amount = int(call.data.replace('üí∞', ''))
        game_text = game_instance.game(user=user, amount=amount)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=game_text, reply_markup=inline_buttons(["–ï—â—ë", "–°—Ç–æ–ø"]))

    elif call.data == '–ï—â—ë':
        add_card_text = game_instance.add_card()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=add_card_text, reply_markup=inline_buttons(["–ï—â—ë", "–°—Ç–æ–ø"]))
    elif call.data == '–°—Ç–æ–ø':
        stop_text = game_instance.stop_card(user)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=stop_text, reply_markup=inline_buttons(['–°—ã–≥—Ä–∞—Ç—å –µ—â—ë', "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '–í –º–µ–Ω—é ‚ÜòÔ∏è':
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!',
                              reply_markup=inline_buttons(
                                  ["–ü—Ä–æ—Ñ–∏–ª—å", "–û—Ä—ë–ª / –†–µ—à–∫–∞", "‚úäüèª/‚úåüèª/‚úãüèª", '–ö–æ—Å—Ç–∏ üé≤', '21üÉè', "–ö–∞–∑–∏–Ω–æ üé∞"]))
    elif call.data == '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚òùüèª':
        account(call.message, user)
    else:
        bot.answer_callback_query(call.id, text='–ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!')


alive.keep_alive()
bot.polling(none_stop=True, interval=0)
