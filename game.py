import alive
import game_21
import logging
from time import sleep
from work_func import *
from game_money import tails, verify
from game_casino import casino, casino_fire
from game_stone import stone_game, stone, scissors, paper
from game_dice import dice, dice_min, dice_three, dice_max

user_game_instances = {}


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–æ–º–∞–Ω–¥—ã "/start"

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
    exists = cursor.fetchone()
    if not exists:
        cursor.execute('INSERT INTO users (user_id, name, money, status, wins) VALUES (?, ?, ?, ?, ?)',
                       (user_id, message.from_user.first_name, 40, '–ù–æ–≤–∏—á–æ–∫', 0))
        conn.commit()
        bot.send_message(6700989923, f'‚ö°Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º‚ö°Ô∏è')
        bot.send_message(message.chat.id,
                         f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name} üëãüèª\n\n'
                         f'–Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π!\n\n'
                         f'–ò –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ–≤–µ—Å–µ–ª–∏—Ç—å—Å—è üéÆ!\n\n'
                         f'–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é üëáüèª',
                         reply_markup=inline_buttons(
                             ["–ü—Ä–æ—Ñ–∏–ª—å ‚ÑπÔ∏è", "–û—Ä—ë–ª / –†–µ—à–∫–∞", "‚úäüèª/‚úåüèª/‚úãüèª", '–ö–æ—Å—Ç–∏ üé≤', '21üÉè', "–ö–∞–∑–∏–Ω–æ üé∞"]))
    else:
        bot.send_message(message.chat.id, f'–†–∞–¥, —á—Ç–æ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å, {message.from_user.first_name}!',
                         reply_markup=inline_buttons(
                             ["–ü—Ä–æ—Ñ–∏–ª—å ‚ÑπÔ∏è", "–û—Ä—ë–ª / –†–µ—à–∫–∞", "‚úäüèª/‚úåüèª/‚úãüèª", '–ö–æ—Å—Ç–∏ üé≤', '21üÉè', "–ö–∞–∑–∏–Ω–æ üé∞"]))
    cursor.close()


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–æ–º–∞–Ω–¥—ã "/info"

@bot.message_handler(commands=['info'])
def send_info(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_1 = types.InlineKeyboardButton(text="üíµ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üíµ", callback_data="üíµ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üíµ",
                                       url='https://yookassa.ru/my/i/Zd3x8X87z_KX/l')
    btn_2 = types.InlineKeyboardButton(text='–í –º–µ–Ω—é ‚ÜòÔ∏è', callback_data='–í –º–µ–Ω—é ‚ÜòÔ∏è')
    markup.add(btn_1, btn_2)
    bot.send_message(message.chat.id,
                     f'‚ùóÔ∏è–†–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏‚ùóÔ∏è\n\n'
                     f'‚ö†Ô∏è–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –†–æ—Å—Å–∏–π—Å–∫–∏–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º '
                     f'–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö!\n\n'
                     f'‚ö†Ô∏è–í—Å–µ —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–∏–Ω—è—Ç—ã–µ –í–∞–º–∏ –≤ —ç—Ç–æ–º –±–æ—Ç–µ - '
                     f'–í–∞—à –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ '
                     f'–ù–ï –ù–ï–°–Å–¢ –∑–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å!\n\n'
                     f'‚ö†Ô∏è–ù–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫\n"–ù–∞—á–∞—Ç—å" –∏–ª–∏ "start"\n'
                     f'–í—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n\n'
                     f'‚ö†Ô∏è–í—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –†–ê–ù–î–û–ú–ï, '
                     f'–ø–æ—ç—Ç–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –ù–ï –ú–û–ñ–ï–¢ –í–õ–ò–Ø–¢–¨ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å!\n\n'
                     f'‚ö†Ô∏è–ï—Å–ª–∏ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏ –í—ã –≥–æ—Ç–æ–≤—ã –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å, '
                     f'—Ç–æ —Å–º–µ–ª–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É\n\n'
                     f'‚úÖ–ü—Ä–∏—è—Ç–Ω–æ–π –≤–∞–º –∏–≥—Ä—ã!',
                     reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ "/sup"

@bot.message_handler(commands=['sup'])
def send_dev(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:")
    bot.register_next_step_handler(message, up_dev)


def up_dev(message):
    bot.send_message(6700989923, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name},\n'
                                 f'c ID - {message.chat.id},\n'
                                 f'–æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n {message.text}')
    bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global user_game_instances
    logging.debug(f"Received callback query: {call.data}")

    user_id = call.from_user.id
    user = get_or_create_user(user_id, call.from_user.first_name)

    if user_id not in user_game_instances:
        user_game_instances[user_id] = game_21.BlackjackGame()

    if call.data == "–ü—Ä–æ—Ñ–∏–ª—å ‚ÑπÔ∏è":
        account(call.message, user)
    elif call.data == "–û—Ä—ë–ª / –†–µ—à–∫–∞":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=tails(), reply_markup=inline_buttons(["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ ü™ô", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == "‚úäüèª/‚úåüèª/‚úãüèª":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=stone_game(), reply_markup=inline_buttons(["‚úäüèª", "‚úåüèª", "‚úãüèª", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == "–ö–∞–∑–∏–Ω–æ üé∞":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=casino(), reply_markup=inline_buttons(["–ó–∞–ø—É—Å–∫ üî•", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '–ö–æ—Å—Ç–∏ üé≤':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=dice(), reply_markup=inline_buttons(["üé≤ < 3", "üé≤ = 3", "üé≤ > 3", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif (call.data == '21üÉè') or (call.data == '–ö –∏–≥—Ä–µ ‚¨ÜÔ∏è'):
        game_instance = game_21.BlackjackGame()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=game_instance.start_card(),
                              reply_markup=inline_buttons(["–ò–≥—Ä–∞—Ç—å ‚èØÔ∏è", "–ü—Ä–∞–≤–∏–ª–∞ üìù", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == "–ü–µ—Ä–µ–¥–∞—Ç—å üí∂":
        if (user_id == 6700989923) or (user_id == 517899909):
            transfer_now(call.message)
        else:
            transfer_money_now(call.message)
    elif (call.data == "ADMIN") or (call.data == '–ö –∞–¥–º–∏–Ω–∫–µ ‚öñÔ∏è'):
        bot.edit_message_text("–ú–µ–Ω—é ADMIN", call.message.chat.id, call.message.message_id,
                              reply_markup=inline_buttons(
                                  ['–°—Ç–∞—Ç üå™', "Users", '‚ùå', '‚òØÔ∏è', '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚òùüèª']))

    elif call.data == "–°—Ç–∞—Ç üå™":
        users_count(call.message)
    elif call.data == "Users":
        admin_users(call, page=1)
    elif call.data == '‚ùå':
        bot.stop_bot()
    elif call.data == '–û—Ä—ë–ª ü¶Ö':
        if user.money < 3:
            check_money(call, user, 3)
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=verify(call, user),
                                  reply_markup=inline_buttons(["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ ü™ô", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '–†–µ—à–∫–∞ ü™ô':
        if user.money < 3:
            check_money(call, user, 3)
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=verify(call, user),
                                  reply_markup=inline_buttons(["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ ü™ô", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '–ó–∞–ø—É—Å–∫ üî•':
        if user.money < 5:
            check_money(call, user, 5)
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=casino_fire(user), reply_markup=inline_buttons(["–ó–∞–ø—É—Å–∫ üî•", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '‚úäüèª':
        if user.money < 2:
            check_money(call, user, 2)
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=stone(user), reply_markup=inline_buttons(["‚úäüèª", "‚úåüèª", "‚úãüèª", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '‚úåüèª':
        if user.money < 2:
            check_money(call, user, 2)
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=scissors(user), reply_markup=inline_buttons(["‚úäüèª", "‚úåüèª", "‚úãüèª", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '‚úãüèª':
        if user.money < 2:
            check_money(call, user, 2)
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=paper(user), reply_markup=inline_buttons(["‚úäüèª", "‚úåüèª", "‚úãüèª", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == 'üé≤ < 3':
        if user.money < 4:
            check_money(call, user, 4)
        else:
            dice_1 = bot.send_dice(call.message.chat.id)
            sleep(3)
            bot.send_message(chat_id=call.message.chat.id,
                             text=dice_min(dice_1, user),
                             reply_markup=inline_buttons(["üé≤ < 3", "üé≤ = 3", "üé≤ > 3", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == 'üé≤ = 3':
        if user.money < 4:
            check_money(call, user, 4)
        else:
            dice_2 = bot.send_dice(call.message.chat.id)
            sleep(3)
            bot.send_message(chat_id=call.message.chat.id,
                             text=dice_three(dice_2, user),
                             reply_markup=inline_buttons(["üé≤ < 3", "üé≤ = 3", "üé≤ > 3", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == 'üé≤ > 3':
        if user.money < 4:
            check_money(call, user, 4)
        else:
            dice_3 = bot.send_dice(call.message.chat.id)
            sleep(3)
            bot.send_message(chat_id=call.message.chat.id,
                             text=dice_max(dice_3, user),
                             reply_markup=inline_buttons(["üé≤ < 3", "üé≤ = 3", "üé≤ > 3", "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '–ü—Ä–∞–≤–∏–ª–∞ üìù':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=user_game_instances[user_id].rules(), reply_markup=inline_buttons(["–ö –∏–≥—Ä–µ ‚¨ÜÔ∏è"]))
    elif call.data == '–ò–≥—Ä–∞—Ç—å ‚èØÔ∏è' or (call.data == '–°—ã–≥—Ä–∞—Ç—å –µ—â—ë'):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=user_game_instances[user_id].start(),
                              reply_markup=inline_buttons(["6üí∞", "9üí∞", "12üí∞", "15üí∞", "–ö –∏–≥—Ä–µ ‚¨ÜÔ∏è"]))

    elif call.data in ["6üí∞", "9üí∞", "12üí∞", "15üí∞"]:
        amount = int(call.data.replace('üí∞', ''))
        if user.money < amount:
            check_money(call, user, amount)
        else:
            game_text = user_game_instances[user_id].game(amount=amount)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=game_text, reply_markup=inline_buttons(["–ï—â—ë", "–•–≤–∞—Ç–∏—Ç"]))

    elif call.data == '–ï—â—ë':
        add_card_text = user_game_instances[user_id].add_card()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=add_card_text, reply_markup=inline_buttons(["–ï—â—ë", "–•–≤–∞—Ç–∏—Ç"]))
    elif call.data == '–•–≤–∞—Ç–∏—Ç':
        stop_text = user_game_instances[user_id].stop_card(user)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=stop_text, reply_markup=inline_buttons(['–°—ã–≥—Ä–∞—Ç—å –µ—â—ë', "–í –º–µ–Ω—é ‚ÜòÔ∏è"]))
    elif call.data == '–í –º–µ–Ω—é ‚ÜòÔ∏è':
        update_status(call.message.chat.id)
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!',
                              reply_markup=inline_buttons(
                                  ["–ü—Ä–æ—Ñ–∏–ª—å ‚ÑπÔ∏è", "–û—Ä—ë–ª / –†–µ—à–∫–∞", "‚úäüèª/‚úåüèª/‚úãüèª", '–ö–æ—Å—Ç–∏ üé≤', '21üÉè', "–ö–∞–∑–∏–Ω–æ üé∞"]))
    elif call.data == '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚òùüèª':
        account(call.message, user)
    elif call.data == '‚òØÔ∏è':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='‚ÄºÔ∏è–ü–æ–ª—å–∑—É–π—Å—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π –ø—Ä–µ–¥–µ–ª—å–Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, '
                                   '–∏–Ω–∞—á–µ –≤—ã–∑–æ–≤–µ—à—å –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤‚ÄºÔ∏è',
                              reply_markup=inline_buttons(
                                  ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚ò¢Ô∏è', '–†–∞—Å—Å—ã–ª–∫–∞ üÜò', '–ö –∞–¥–º–∏–Ω–∫–µ ‚öñÔ∏è'], buttons_per_row=1))
    elif call.data == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚ò¢Ô∏è':
        send_user(call.message)
    elif call.data == '–†–∞—Å—Å—ã–ª–∫–∞ üÜò':
        all_send(call.message)
    elif call.data.startswith('prev_'):
        page = int(call.data.split('_')[-1]) - 1
        admin_users(call, page=page)

    elif call.data.startswith('next_'):
        page = int(call.data.split('_')[-1]) + 1
        admin_users(call, page=page)

    else:
        bot.answer_callback_query(call.id, text='–ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!')


alive.keep_alive()
bot.polling(none_stop=True, interval=0)
